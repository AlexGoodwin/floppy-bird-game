<!DOCTYPE html>
<!-- saved from url=(0084)https://moodle.cs.colorado.edu/pluginfile.php/23239/mod_page/content/2/Gameloop.html -->
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

	<title>Game Loop</title>

	<script src="./Gameloop_files/jquery.min.js"></script>
	<script src="jquery.hotkeys.js"></script>
	<script src="key_status.js"></script>

	<style>
	body {
		overflow: hidden;
	}
	</style>

	<script type="text/javascript">
		var canvas, context;

		$(window).bind("load", function() {
			// Variables representing the canvas and the canvas' context (the context is used for actually drawing on the canvas)
			canvas = document.getElementById("canvas");
			context = canvas.getContext("2d");

			fitCanvasToWindow();

			// global game variables
			var running = false,
				started = false,
				frameID,
				delta = 0,
				lastFrameTimeMs = 0,
				startTime = Date.now(),
				hiScore = 0,
				maxFPS = 120,
				maxFrameSteps = 240,
				framesThisSecond = 0,
				lastFpsUpdate = 0,
				fps = maxFPS,
				font = "20px Helvetica, Arial, sans-serif",
				scoreColor = "red",
				fpsColor = "blue",
				timestep = 1000 / 60;

			// Object variables
			var ball = {
				x: 60,
				y: canvas.height / 2,
				radius: 15,
				fillColor: "red",
				strokeColor: "black",
				velocity_x: 0,
				velocity_y: 0,
				speed: 20,
				gravity: 0.25,
				gravitySpeed: 0,
				lastYPos: 0,
			};

			var tower = {
				velocity_x: -4,
				gapScale: 8,
				width: 50,
				horizontalGap: 300,
				fillColor: 'saddlebrown'
			};

			// the array of currently spawned towers
			var towers = [];

			start();

			function mainLoop(timestamp) {
				// throttle frame rate
				if(timestamp < lastFrameTimeMs + (1000 / maxFPS)) {
					requestAnimationFrame(mainLoop);
					return;
				}

				measureFPS(timestamp);

				// track accumulated time that hasn't been simulated yet
				delta += timestamp - lastFrameTimeMs; // time since last frame
				lastFrameTimeMs = timestamp;

				processInput();

				// simulate total elapsed time in fixed-size chunks
				var numUpdateSteps = 0;
				while (delta >= timestep) {
					update(timestep);
					delta -= timestep;

					// sanity check (prevent spiral of death)
					numUpdateSteps += 1;
					if (numUpdateSteps >= maxFrameSteps) {
						panic();
						break;
					}
				}

				draw(delta / timestep); // pass interpolation percentage

				frameID = requestAnimationFrame(mainLoop);
			}

			function update(delta) {
				ball.lastYPos = ball.y;
				ball.y += (ball.velocity_y);

				// speed up towers as score increases
				tower.velocity_x = (-4 - (currentScore() / 4000) );

				towerLogic();
				collisionDetection();
			}

			function panic() {
				delta = 0;
			}

			function measureFPS(timestamp) {
				if(timestamp > lastFpsUpdate + 1000) { // update every second
					var decay = 0.25;
					fps = decay * framesThisSecond + (1 - decay) * fps;
					lastFpsUpdate = timestamp;
					framesThisSecond = 0;
				}
				framesThisSecond += 1;
			}

			function processInput() {
				if (keydown.up && ball.y > (0 + ball.radius)) {
					ball.velocity_y = -ball.speed;
					ball.gravitySpeed = 0;
				} else if (keydown.down && ball.y < (canvas.height - ball.radius)) {
					ball.gravitySpeed += ball.gravity;
					ball.velocity_y = ball.speed + ball.gravitySpeed;
				} else if (ball.y < (canvas.height - ball.radius)) {
					ball.gravitySpeed += ball.gravity;
					ball.velocity_y = ball.gravitySpeed;
				} else {
					ball.velocity_y = 0;
				}
			}

			function draw(interpolationPercentage) {
				//clear our drawing
				context.clearRect(0, 0, canvas.width, canvas.height);

				//draw the ball
				context.beginPath();
				context.arc(ball.x, (ball.lastYPos + (ball.y - ball.lastYPos) * interpolationPercentage), ball.radius, 0, 2 * Math.PI, false);
				context.fillStyle = ball.fillColor;
				context.fill();
				context.lineWidth = 1;
				context.strokeStyle = ball.strokeColor;
				context.stroke();
				//context.closePath();

				// draw towers
				for (var i = 0; i < towers.length; i += 1) {
					context.fillStyle = tower.fillColor;
					// draw top rectangle
					context.fillRect(
						towers[i].x1,
						0,
						towers[i].x2 - towers[i].x1,
						towers[i].y1
					);

					// draw bottom rectangle
					context.fillRect(
						towers[i].x1,
						towers[i].y2,
						towers[i].x2 - towers[i].x1,
						canvas.height - towers[i].y2
					);
				}

				context.font = font;

				// draw current score
				context.fillStyle = scoreColor;
				context.fillText("Your Score: " + currentScore(), canvas.width - 200, 20);
				context.fillText("High Score: " + hiScore, canvas.width - 200, 50);

				// draw FPS
				context.fillStyle = fpsColor;
				context.fillText(Math.round(fps) + " FPS", canvas.width - 200, 80);

				// draw tower.velocity_x
				context.fillText("Tower Speed: " + tower.velocity_x, canvas.width - 200, 110);
			}

			function stop() {
				running = false;
				started = false;
				cancelAnimationFrame(frameID);
			}

			function start() {
				if (!started) { // don't request multiple frames
					started = true;

					frameID = requestAnimationFrame(mainLoop);
				}
			}

			function addTower(x) {
				var rand_y = Math.random() * canvas.height;
				var gap = (ball.radius * tower.gapScale);

				console.log(gap);

				// top rectangle
				var tower1 = {
					x1: x,
					x2: x + tower.width,
					y1: 0,
					y2: rand_y - (gap / 2),
				}

				// bottom rectangle
				var tower2 = {
					x1: x,
					x2: x + tower.width,
					y1: rand_y + (gap / 2),
					y2: canvas.height,
				}

				towers.push({
					x1: tower1.x1,
					x2: tower1.x2,
					y1: tower1.y2,
					y2: tower2.y1,
					velocity_x: tower.velocity_x
				});
			}

			function removeLeftTower() {
				towers.shift();
			}

			function removeAllTowers() {
					towers = [];
			}

			function towerLogic() {
				var maxTowers = canvas.width / (tower.width + tower.horizontalGap);

				if (towers.length < maxTowers) {
					if (towers.length == 0) {
						addTower(canvas.width - 15);
					} else {
						if (towers[towers.length - 1].x1 < canvas.width - tower.horizontalGap) {
							addTower(canvas.width - 15);
						}
					}
				}

				for (var i = 0; i < towers.length; i += 1) {
					towers[i].x1 += tower.velocity_x;
					towers[i].x2 += tower.velocity_x;

					if (towers[i].x2 <= 0) {
						removeLeftTower();
					}
				}
			}

			function collisionDetection() {
				var ballTop = ball.y - ball.radius,
					ballBottom = ball.y + ball.radius,
					ballLeft = ball.x - ball.radius,
					ballRight = ball.x + ball.radius;

				if (ballRight >= towers[0].x1 && ballRight <= towers[0].x2) {
					if (ballTop <= towers[0].y1 || ballBottom >= towers[0].y2) {
						collision();
					}
				}
			}

			function currentScore() {
				return Date.now() - startTime;
			}

			function collision() {
				removeAllTowers();

				hiScore = Math.max(currentScore(), hiScore);

				startTime = Date.now();
				stop();
			}
		});

		$(window).resize(function(e) {
			fitCanvasToWindow();
		});

		function fitCanvasToWindow() {
			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;
		}
	</script>

</head>

<body style="margin: 0; padding: 0;">
	<canvas id="canvas" height="640" width="640" style="border: 1px solid black; background-image: url(./bg.png); background-repeat: repeat-x; background-color: #5ddf72;">
		Your browser does not support the canvas element.
	</canvas>
</body>

</html>
