<!DOCTYPE html>
<!---
Referenced http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing
Authors Alex Goodwin & Anurag Azad
9/20/2016
FLOPPY BIRD
Intro to VR
-->
<!-- saved from url=(0084)https://moodle.cs.colorado.edu/pluginfile.php/23239/mod_page/content/2/Gameloop.html -->
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

        <title>Game Loop</title>

        <script src="./Gameloop_files/jquery.min.js"></script>
        <script src="jquery.hotkeys.js"></script>
        <script src="key_status.js"></script>

        <style>
            body {
                overflow: hidden;
            }

        </style>
    </head>

    <body style="margin: 0; padding: 0;">
        <canvas id="canvas" height="640" width="640" style="border: 1px solid black; background-image: url(./bg.png); background-repeat: repeat-x; background-color: #5ddf72;">
            Your browser does not support the canvas element.
        </canvas>

        <script type="text/javascript">
            /**
							Drawing context
						**/
            canvas = document.getElementById("canvas"),
            context = canvas.getContext("2d");

            /**
							Game Settings
						**/
            running = false,
            started = false,
            paused = false,
            render_hud = true,
            render_towers = true,
            render_ball = true,
            render_menu = false,
            frameID = null,
            startTime = Date.now(),
            font = "20px Helvetica, Arial, sans-serif",
            scoreColor = "red",
            fpsColor = "red",
            framesThisSecond = 0,
            lastFpsUpdate = 0,
            delta = 0,
            lastFrameTimeMs = 0,
            maxFrameSteps = 240,
            maxFPS = 60,
            fps = maxFPS,
            timestep = 1000 / maxFPS;

            /**
							Game Objects
						**/
            ball = {
                x: 60,
                y: canvas.height / 2,
                radius: 15,
                fillColor: "red",
                strokeColor: "black",
                velocity_x: 0,
                velocity_y: 0,
                speed: canvas.height / 30,
                gravity: canvas.height / 1000,
                gravitySpeed: 0,
                lastYPos: 0
            }

            tower = {
                initial_velocity_x: -6,
								velocity_x: -6,
								initialGapScaler: canvas.height / 10,
                verticalGapScaler: canvas.height / 10,
                width: 200,
                horizontalGap: 1000,
                fillColor: 'saddlebrown',
                minGapSize: 15
            }

            menu = {
                backgroundColor: "black"
            }

            player = {
                score: 0,
                hiscore: 0,
								tries: 0
            }

            // the array of currently spawned towers
            towers = [];

            $(window).bind("load", function() {
                fitCanvasToWindow();
                start();
            });

            $(window).resize(function(e) {
                fitCanvasToWindow();
            });

            mainLoop = (timestamp) => {
                // throttle frame rate
                if (timestamp < lastFrameTimeMs + (1000 / maxFPS)) {
                    requestAnimationFrame(mainLoop);
                    return;
                }

                measureFPS(timestamp);

                // track accumulated time that hasn't been simulated yet
                delta += timestamp - lastFrameTimeMs; // time since last frame
                lastFrameTimeMs = timestamp;

                processInput();

                player.score += 1;

                // simulate total elapsed time in fixed-size chunks
                var numUpdateSteps = 0;
                while (delta >= timestep) {
                    if (!paused) {
                        update(timestep);
                    }
                    delta -= timestep;

                    // sanity check (prevent spiral of death)
                    numUpdateSteps += 1;
                    if (numUpdateSteps >= maxFrameSteps) {
                        panic();
                        break;
                    }
                }

                draw(delta / timestep); // pass interpolation percentage

                frameID = requestAnimationFrame(mainLoop);
            }

            update = (delta) => {
                ball.lastYPos = ball.y;
                ball.y += (ball.velocity_y);

                // speed up towers as score increases
                tower.velocity_x = -5 - Math.log((1 / 2) * (player.score + 1) * (player.score + 1));

                // make vertical gaps get smaller as score increased
                tower.verticalGapScaler = tower.verticalGapScaler * .999;

                tower.verticalGapScaler = Math.max(tower.verticalGapScaler, tower.minGapSize);

                towerLogic();
                collisionDetection();
            }

            panic = () => {
                delta = 0;
            }

            measureFPS = (timestamp) => {
                if (timestamp > lastFpsUpdate + 1000) { // update every second
                    var decay = .25; // only move fps by 25% per second
                    fps = decay * framesThisSecond + (1 - decay) * fps;
                    lastFpsUpdate = timestamp;
                    framesThisSecond = 0;
                }
                framesThisSecond += 1;
            }

            processInput = () => {
                // up and down
                if (keydown.up && ball.y > (0 + ball.radius)) {
                    ball.velocity_y = -ball.speed;
                    ball.gravitySpeed = 0;
                } else if (keydown.down && ball.y < (canvas.height - ball.radius)) {
                    ball.gravitySpeed += ball.gravity;
                    ball.velocity_y = ball.speed + ball.gravitySpeed;
                } else if (ball.y < (canvas.height - ball.radius)) {
                    ball.gravitySpeed += ball.gravity;
                    ball.velocity_y = ball.gravitySpeed;
                } else {
                    ball.velocity_y = 0;
                }

                // pause menu
                if (keydown.esc) {
                    if (!render_menu) {
                        openMenu();
                    } else {
                        closeMenu();
                    }
                }
            }

            openMenu = () => {
                paused = true;
                render_menu = true;
            }

            closeMenu = () => {
                render_menu = false;
                paused = false;
            }

            draw = (interpolationPercentage) => {
                // clear our drawing
                context.clearRect(0, 0, canvas.width, canvas.height);

                /**
									Ball
								**/
                if (render_ball) {
                    context.beginPath();
                    context.ellipse(ball.x, ball.lastYPos + (ball.y - ball.lastYPos) * interpolationPercentage, ball.radius, Math.abs(ball.radius - ((ball.velocity_y + ball.gravitySpeed) / 2)), 0, 2 * Math.PI, false);
                    context.fillStyle = ball.fillColor;
                    context.fill();
                    context.lineWidth = 1;
                    context.strokeStyle = ball.strokeColor;
                    context.stroke();
                    context.closePath();
                }

                /**
									Towers
								**/
                if (render_towers) {
                    for (var i = 0; i < towers.length; i += 1) {
                        context.fillStyle = tower.fillColor;
                        // draw top rectangle
                        context.fillRect(towers[i].x1, 0, towers[i].x2 - towers[i].x1, towers[i].y1);

                        // draw bottom rectangle
                        context.fillRect(towers[i].x1, towers[i].y2, towers[i].x2 - towers[i].x1, canvas.height - towers[i].y2);
                    }
                }

                /**
									Console
								**/
                if (render_hud) {
                    console_x = canvas.width - 300,
                    console_y = 30,
                    lineHeight = font.match(/[\d]+/) * 1.5;

                    context.font = font;

                    // draw background
                    context.fillStyle = "rgba(0,0,0,.8)";
                    context.fillRect(console_x - 10, 20, 300, console_y + (lineHeight * 5))

                    // draw current score
                    context.fillStyle = scoreColor;
                    context.fillText("Your Score: " + player.score, console_x, console_y + (lineHeight * 1));
                    context.fillText("High Score: " + player.hiscore, console_x, console_y + (lineHeight * 2));

                    // draw FPS
                    context.fillStyle = fpsColor;
                    context.fillText(Math.round(fps) + " FPS", console_x, console_y + (lineHeight * 3));

                    // draw Tower Speed
                    context.fillText("Tower Speed: " + (tower.velocity_x).toFixed(2), console_x, console_y + (lineHeight * 4));

                    // draw Tower Vertical Gap Size
                    context.fillText("Tower.verticalGapScaler: " + (tower.verticalGapScaler).toFixed(2), console_x, console_y + (lineHeight * 5));
                }

                /**
									Menu
								**/
                if (render_menu) {
                    let width = canvas.width / 4,
                        height = 400;

                    context.fillRect((canvas.width / 2) - (width / 2), (canvas.height / 2) - (height / 2), width, height);
                }
            }

            stop = () => {
                running = false;
                started = false;
                cancelAnimationFrame(frameID);

                removeAllTowers();

                player.hiscore = Math.max(player.score, player.hiscore);
								player.score = 0;
								player.tries += 1;

								// reset towers
								tower.verticalGapScaler = tower.initialGapScaler;
								tower.velocity_x = tower.initial_velocity_x;
            }

            start = () => {
                if (!started) { // don't request multiple frames
                    started = true;

                    frameID = requestAnimationFrame(mainLoop);
                }
            }

            addTower = (x) => {
                var rand_y = Math.random() * canvas.height;
                var gap = (ball.radius * tower.verticalGapScaler);

                // top rectangle
                var tower1 = {
                    x1: x,
                    x2: x + tower.width,
                    y1: 0,
                    y2: rand_y - (gap / 2)
                }

                // bottom rectangle
                var tower2 = {
                    x1: x,
                    x2: x + tower.width,
                    y1: rand_y + (gap / 2),
                    y2: canvas.height
                }

                towers.push({x1: tower1.x1, x2: tower1.x2, y1: tower1.y2, y2: tower2.y1, velocity_x: tower.velocity_x});
            }

            removeLeftTower = () => {
                towers.shift();
            }

            removeAllTowers = () => {
                towers = [];
            }

            towerLogic = () => {
                var maxTowers = canvas.width / (tower.width + tower.horizontalGap);

                if (towers.length < maxTowers) {
                    if (towers.length == 0) {
                        addTower(canvas.width);
                    } else {
                        if (towers[towers.length - 1].x1 < canvas.width - tower.horizontalGap) {
                            addTower(canvas.width);
                        }
                    }
                }

                for (var i = 0; i < towers.length; i += 1) {
                    towers[i].x1 += tower.velocity_x;
                    towers[i].x2 += tower.velocity_x;

                    if (towers[i].x2 <= 0) {
                        removeLeftTower();
                    }
                }
            }

            collisionDetection = () => {
								if(towers.length > 0) {
									let ballTop = ball.y - ball.radius,
											ballBottom = ball.y + ball.radius,
											ballLeft = ball.x - ball.radius,
											ballRight = ball.x + ball.radius;

									if (ballRight >= towers[0].x1 && ballRight <= towers[0].x2) {
											if (ballTop <= towers[0].y1 || ballBottom >= towers[0].y2) {
													collision();
											}
									}
								}
            }

	          collision = () => {
                stop();
            }

            fitCanvasToWindow = () => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            }

            debounce = (func, wait, immediate) => {
                var timeout;
                return function() {
                    var context = this,
                        args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate)
                            func.apply(context, args);
                        };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow)
                        func.apply(context, args);
                    };
            };
        </script>
    </body>

</html>
